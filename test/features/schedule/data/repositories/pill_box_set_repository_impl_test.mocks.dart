// Mocks generated by Mockito 5.0.0 from annotations
// in pusherman/test/features/schedule/data/repositories/pill_box_set_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:http/src/client.dart' as _i4;
import 'package:http/src/response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pusherman/core/network/network_info.dart' as _i6;
import 'package:pusherman/features/schedule/data/datasources/pill_box_set_local_data_source.dart'
    as _i8;
import 'package:pusherman/features/schedule/data/datasources/pill_box_set_remote_data_source.dart'
    as _i9;
import 'package:pusherman/features/schedule/data/models/pill_box_set_model.dart'
    as _i3;
import 'package:shared_preferences/shared_preferences.dart' as _i2;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeSharedPreferences extends _i1.Fake implements _i2.SharedPreferences {
}

class _FakePillBoxSetModel extends _i1.Fake implements _i3.PillBoxSetModel {}

class _FakeClient extends _i1.Fake implements _i4.Client {}

class _FakeResponse extends _i1.Fake implements _i5.Response {}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future.value(false)) as _i7.Future<bool>);
}

/// A class which mocks [PillBoxSetLocalDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockPillBoxSetLocalDataSourceImpl extends _i1.Mock
    implements _i8.PillBoxSetLocalDataSourceImpl {
  MockPillBoxSetLocalDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPreferences get sharedPreferences =>
      (super.noSuchMethod(Invocation.getter(#sharedPreferences),
          returnValue: _FakeSharedPreferences()) as _i2.SharedPreferences);
  @override
  _i7.Future<_i3.PillBoxSetModel> getByDependent(String? dependent) =>
      (super.noSuchMethod(Invocation.method(#getByDependent, [dependent]),
              returnValue: Future.value(_FakePillBoxSetModel()))
          as _i7.Future<_i3.PillBoxSetModel>);
  @override
  _i7.Future<void> put(_i3.PillBoxSetModel? model) =>
      (super.noSuchMethod(Invocation.method(#put, [model]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
}

/// A class which mocks [PillBoxSetRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockPillBoxSetRemoteDataSourceImpl extends _i1.Mock
    implements _i9.PillBoxSetRemoteDataSourceImpl {
  MockPillBoxSetRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient()) as _i4.Client);
  @override
  _i7.Future<_i3.PillBoxSetModel> getByDependent(String? dependent) =>
      (super.noSuchMethod(Invocation.method(#getByDependent, [dependent]),
              returnValue: Future.value(_FakePillBoxSetModel()))
          as _i7.Future<_i3.PillBoxSetModel>);
  @override
  _i7.Future<_i5.Response> put(_i3.PillBoxSetModel? pillBoxSet) =>
      (super.noSuchMethod(Invocation.method(#put, [pillBoxSet]),
              returnValue: Future.value(_FakeResponse()))
          as _i7.Future<_i5.Response>);
}
